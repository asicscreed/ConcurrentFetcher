'use strict';class FetchError$$module$dist$concurrentfetcher_es extends Error{constructor(a,b,m){super(a);this.name="FetchError";this.url=b;this.status=m}}class JsonParseError$$module$dist$concurrentfetcher_es extends Error{constructor(a,b){super(a);this.name="JsonParseError";this.url=b}}
class AbortManager$$module$dist$concurrentfetcher_es{constructor(){this.controllers=new Map}createSignal(a){const b=new AbortController;this.controllers.set(a,b);return b.signal}abort(a){const b=this.controllers.get(a);b&&(b.abort(),this.controllers.delete(a))}abortAll(){this.controllers.forEach(a=>a.abort());this.controllers.clear()}}
class ConcurrentFetcher$$module$dist$concurrentfetcher_es{constructor(a){this.requests=a;this.errors=[];this.abortManager=new AbortManager$$module$dist$concurrentfetcher_es}delay(a){return new Promise(b=>setTimeout(b,a))}async fetchWithRetry(a,b,m,n,d,f=0){try{const e="undefined"!==typeof Request&&a instanceof Request?a.clone():a,c=await fetch(e,b);if(!c.ok)throw new FetchError$$module$dist$concurrentfetcher_es("Fetch HTTP error! status: "+c.status,a,c.status);let g;const h=c.headers.get("content-type");
if(h&&h.includes("application/json")){const p=c.clone();try{g=await c.json()}catch(q){g=await p.text()}}else g=h&&h.includes("text/")?await c.text():await c.blob();return g}catch(e){if(0<n)return n--,f++,await this.delay(d),this.fetchWithRetry(a,b,m,n,d,f);throw e;}}async concurrentFetch({progressCallback:a}={}){const b=[];let m=0;const n=this.requests.map((d,f)=>{const {url:e,fetchOptions:c={},callback:g=null,requestId:h=null,maxRetries:p=0,retryDelay:q=1E3,abortTimeout:r=0}=d,l=null!==h&&void 0!==
h?h:f.toString();d={method:"GET",headers:{Accept:"application/json","Content-Type":"application/json; charset: UTF-8",mode:"cors"},signal:0<r?AbortSignal.any([this.abortManager.createSignal(l),AbortSignal.timeout(r)]):this.abortManager.createSignal(l),...c};return this.fetchWithRetry(e,d,l,p,q).then(k=>{g?g(l,k,null,this.abortManager):b[f]=k}).catch(k=>{k instanceof SyntaxError&&(k=new JsonParseError$$module$dist$concurrentfetcher_es(k.message,e));g?g(l,null,k,this.abortManager):(this.errors.push({uniqueId:l,
url:e,error:k}),b[f]=null)}).finally(()=>{m++;a&&a(l,m,this.requests.length)})});try{return await Promise.all(n),{results:b?b.filter(d=>null!==d):[],errors:this.errors}}catch(d){return this.errors.push({uniqueId:"unknown",url:"unknown",error:d}),this.requests.forEach(f=>{var e,c;return null===(e=f.callback)||void 0===e?void 0:e.call(f,null!==(c=f.requestId)&&void 0!==c?c:"unknown",null,d,this.abortManager)}),{results:[],errors:this.errors}}}abort(a){this.abortManager.abort(a)}abortAll(){this.abortManager.abortAll()}}
var module$dist$concurrentfetcher_es={};module$dist$concurrentfetcher_es.AbortManager=AbortManager$$module$dist$concurrentfetcher_es;module$dist$concurrentfetcher_es.ConcurrentFetcher=ConcurrentFetcher$$module$dist$concurrentfetcher_es;module$dist$concurrentfetcher_es.FetchError=FetchError$$module$dist$concurrentfetcher_es;module$dist$concurrentfetcher_es.JsonParseError=JsonParseError$$module$dist$concurrentfetcher_es;
